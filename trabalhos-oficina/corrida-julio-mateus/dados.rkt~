#lang racket


;; Arquivo para definição dos tipos de dados do programa.


(require 2htdp/image)
(require rackunit)
;inclua outros pacotes ou arquivos necessários usando (require ...)
(require "constantes.rkt")
(provide (all-defined-out)) ;permite que outros arquivos importem deste
(require 2htdp/universe)

;; =================
;; Definições de dados:7678676
;; a vida
;; EstadoMundo é ... (dê um nome melhor para EstadoMundo)

 (define-struct carro (x dx)  #:transparent)  ;estrutura

;;carro é (make-carro Numero[0,inf.] Numero)
;;interp. a estrutura representa um carro com posicao x no cenario
;;e a possiçao x e variavel 
;;Exemplos:

(define CARRO-INICIAL (make-carro (/ COMP 2) 10))
(define CARRO-NA-DIREITA  (make-carro 200 10))
(define CARRO-NA-ESQUERDA (make-carro 400 10))

#;
(define (fn-para-carro c)
  (...
   (carro-x c)
   (carro-dx c)
   ))

(define-struct carro-i (x y dy)  #:transparent)  ;estrutura
;; Carro-i é (make-carro-i Numero)
;; interp. representa a posição do carro-i no eixo y e 
;; o deslocamento dy do carro-i no eixo y
;; Exemplos:
(define CI-INICIAL (make-carro-i POS-X-CI2 20 5))
(define CI-DESCENDO (make-carro-i POS-X-CI2 100 20))
(define CI-DESCENDO-FINAL (make-carro-i POS-X-CI2 (- ALTURA 20) 20))

#;
(define (fn-para-carro-i ci)
  (...
   (carro-i-x ci)
   (carro-i-y ci)
   (carro-i-dy ci)
   ))


(define-struct arvore (x y dy)  #:transparent)  ;estrutura
;; Arvore é(make-arvore Numero[0,inf.] Numero)
;; Representa a posicao da arvore no eixo y 
;; e o deslocamento dy da arvore no eixo y
(define A1-INICIAL (make-arvore POS-X-A1 0 5))
(define A1-DESCENDO (make-arvore POS-X-A1 100 20))
(define A1-DESCENDO-FINAL (make-arvore POS-X-A1 (- ALTURA 20) 20))

(define A2-INICIAL (make-arvore POS-X-A2 0 5))
(define A2-DESCENDO (make-arvore POS-X-A2 100 20))
(define A2-DESCENDO-FINAL (make-arvore POS-X-A2 (- ALTURA 20) 20))

#;
(define (fn-para-arvore ci)
  (...
   (arvore-x a)
   (arvore-y a)
   (arvore-dy a)
   ))


(define-struct faixa (x y dy)  #:transparent)  ;estrutura
;; Faixa é(make-faixa Numero[0,inf.] Numero)
;; Representa a posicao da faixa no eixo y 
;; e o deslocamento dy da arvore no eixo y
(define F1-INICIAL (make-faixa POS-X-F1 0 5))
(define F1-DESCENDO (make-faixa POS-X-F1 100 20))
(define F1-DESCENDO-FINAL (make-faixa POS-X-F1 (- ALTURA 20) 20))

(define F2-INICIAL (make-faixa POS-X-F2 0 5))
(define F2-DESCENDO (make-faixa POS-X-F2 100 20))
(define F2-DESCENDO-FINAL (make-faixa POS-X-F2 (- ALTURA 20) 20))

#;
(define (fn-para-faixa ci)
  (...
   (faixa-x f)
   (faixa-y f)
   (faixa-dy f)
   ))


;; Pontuacao é Inteiro
;; interp. a pontuacao do jogo
;; Exemplos:
(define P-INICIAL 0)
(define P-MAIS-UM PONTOS-GANHOS)
#;
(define (fn-para-pontuacao p)
  (... p))

;;vida e um Inteiro
;;interp. a quantidades de vida
;;Exemplos
(define vida-inicial 3)
(define vida-final 0)
#;
(define (fn-para-vida v)
  (... v))



;; ListaDeCarro-i é um desses:
;; - empty
;; - (cons Carro-i ListaDeCarro-ir)
;; Exemplos,
;(define lista (list CI-INICIAL
;                    (make-carro-i 
 ;                   (make-carro-i (* LIMITE-DIR 0.75) 100 5)))

#;
(define (fn-para-ldci ldci)
  (cond [(empty? ldci) (...)]                   ;CASO BASE (CONDIÇÃO DE PARADA)
        [else (... (first ldci)                 ;Carro-i
                   (fn-para-ldci (rest ldci)))])) ;RECURSÃO EM CAUDA


(define-struct jogo (carro carro-i acabou? pontuacao) #:transparent)
;; Jogo é (make-jogo Carro ListaDeCarros-i Boolean Pontuacao)
;; interp. um jogo composto pelo carro (personagem), e tres carros-i(inimigos),
;; uma flag que indica se jogo acabou (game over), e a pontuacao
;; Exemplos
(define JOGO-INICIAL (make-jogo CARRO-INICIAL CI-INICIAL #f 0))
(define JOGO-INICIAL2 (make-jogo CARRO-INICIAL CI-DESCENDO #f 0))
(define JOGO-GAME-OVER (make-jogo CARRO-INICIAL CI-DESCENDO-FINAL #t 200))

#;
(define (fn-para-jogo j)
  (... (jogo-carro j)
       (jogo-carro-i j)
       (jogo-acabou? j)
       (jogo-pontuacao j)
       (jogo-vida j)))