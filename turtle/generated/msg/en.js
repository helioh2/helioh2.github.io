// This file was automatically generated.  Do not modify.

'use strict';
var BlocklyMsg = {};
var BlocklyGamesMsg = {};

BlocklyMsg["VARIABLES_DEFAULT_NAME"] = "item";
BlocklyMsg["UNNAMED_KEY"] = "unnamed";
BlocklyMsg["TODAY"] = "Today";
BlocklyMsg["DUPLICATE_BLOCK"] = "Duplicate";
BlocklyMsg["ADD_COMMENT"] = "Add Comment";
BlocklyMsg["REMOVE_COMMENT"] = "Remove Comment";
BlocklyMsg["DUPLICATE_COMMENT"] = "Duplicate Comment";
BlocklyMsg["EXTERNAL_INPUTS"] = "External Inputs";
BlocklyMsg["INLINE_INPUTS"] = "Inline Inputs";
BlocklyMsg["DELETE_BLOCK"] = "Delete Block";
BlocklyMsg["DELETE_X_BLOCKS"] = "Delete %1 Blocks";
BlocklyMsg["DELETE_ALL_BLOCKS"] = "Delete all %1 blocks?";
BlocklyMsg["CLEAN_UP"] = "Clean up Blocks";
BlocklyMsg["COLLAPSE_BLOCK"] = "Collapse Block";
BlocklyMsg["COLLAPSE_ALL"] = "Collapse Blocks";
BlocklyMsg["EXPAND_BLOCK"] = "Expand Block";
BlocklyMsg["EXPAND_ALL"] = "Expand Blocks";
BlocklyMsg["DISABLE_BLOCK"] = "Disable Block";
BlocklyMsg["ENABLE_BLOCK"] = "Enable Block";
BlocklyMsg["HELP"] = "Help";
BlocklyMsg["UNDO"] = "Undo";
BlocklyMsg["REDO"] = "Redo";
BlocklyMsg["CHANGE_VALUE_TITLE"] = "Change value:";
BlocklyMsg["RENAME_VARIABLE"] = "Rename variable...";
BlocklyMsg["RENAME_VARIABLE_TITLE"] = "Rename all '%1' variables to:";
BlocklyMsg["NEW_VARIABLE"] = "Create variable...";
BlocklyMsg["NEW_STRING_VARIABLE"] = "Create string variable...";
BlocklyMsg["NEW_NUMBER_VARIABLE"] = "Create number variable...";
BlocklyMsg["NEW_COLOUR_VARIABLE"] = "Create colour variable...";
BlocklyMsg["NEW_VARIABLE_TYPE_TITLE"] = "New variable type:";
BlocklyMsg["NEW_VARIABLE_TITLE"] = "New variable name:";
BlocklyMsg["VARIABLE_ALREADY_EXISTS"] = "A variable named '%1' already exists.";
BlocklyMsg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "A variable named '%1' already exists for another type: '%2'.";
BlocklyMsg["DELETE_VARIABLE_CONFIRMATION"] = "Delete %1 uses of the '%2' variable?";
BlocklyMsg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Can't delete the variable '%1' because it's part of the definition of the function '%2'";
BlocklyMsg["DELETE_VARIABLE"] = "Delete the '%1' variable";
BlocklyMsg["COLOUR_PICKER_HELPURL"] = "https://en.wikipedia.org/wiki/Color";
BlocklyMsg["COLOUR_PICKER_TOOLTIP"] = "Choose a colour from the palette.";
BlocklyMsg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";
BlocklyMsg["COLOUR_RANDOM_TITLE"] = "random colour";
BlocklyMsg["COLOUR_RANDOM_TOOLTIP"] = "Choose a colour at random.";
BlocklyMsg["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";
BlocklyMsg["COLOUR_RGB_TITLE"] = "colour with";
BlocklyMsg["COLOUR_RGB_RED"] = "red";
BlocklyMsg["COLOUR_RGB_GREEN"] = "green";
BlocklyMsg["COLOUR_RGB_BLUE"] = "blue";
BlocklyMsg["COLOUR_RGB_TOOLTIP"] = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
BlocklyMsg["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";
BlocklyMsg["COLOUR_BLEND_TITLE"] = "blend";
BlocklyMsg["COLOUR_BLEND_COLOUR1"] = "colour 1";
BlocklyMsg["COLOUR_BLEND_COLOUR2"] = "colour 2";
BlocklyMsg["COLOUR_BLEND_RATIO"] = "ratio";
BlocklyMsg["COLOUR_BLEND_TOOLTIP"] = "Blends two colours together with a given ratio (0.0 - 1.0).";
BlocklyMsg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
BlocklyMsg["CONTROLS_REPEAT_TITLE"] = "repeat %1 times";
BlocklyMsg["CONTROLS_REPEAT_INPUT_DO"] = "do";
BlocklyMsg["CONTROLS_REPEAT_TOOLTIP"] = "Do some statements several times.";
BlocklyMsg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";
BlocklyMsg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repeat while";
BlocklyMsg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repeat until";
BlocklyMsg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "While a value is true, then do some statements.";
BlocklyMsg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "While a value is false, then do some statements.";
BlocklyMsg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";
BlocklyMsg["CONTROLS_FOR_TOOLTIP"] = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
BlocklyMsg["CONTROLS_FOR_TITLE"] = "count with %1 from %2 to %3 by %4";
BlocklyMsg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";
BlocklyMsg["CONTROLS_FOREACH_TITLE"] = "for each item %1 in list %2";
BlocklyMsg["CONTROLS_FOREACH_TOOLTIP"] = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
BlocklyMsg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
BlocklyMsg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "break out of loop";
BlocklyMsg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continue with next iteration of loop";
BlocklyMsg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Break out of the containing loop.";
BlocklyMsg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Skip the rest of this loop, and continue with the next iteration.";
BlocklyMsg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Warning: This block may only be used within a loop.";
BlocklyMsg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";
BlocklyMsg["CONTROLS_IF_TOOLTIP_1"] = "If a value is true, then do some statements.";
BlocklyMsg["CONTROLS_IF_TOOLTIP_2"] = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
BlocklyMsg["CONTROLS_IF_TOOLTIP_3"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
BlocklyMsg["CONTROLS_IF_TOOLTIP_4"] = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
BlocklyMsg["CONTROLS_IF_MSG_IF"] = "if";
BlocklyMsg["CONTROLS_IF_MSG_ELSEIF"] = "else if";
BlocklyMsg["CONTROLS_IF_MSG_ELSE"] = "else";
BlocklyMsg["CONTROLS_IF_IF_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this if block.";
BlocklyMsg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Add a condition to the if block.";
BlocklyMsg["CONTROLS_IF_ELSE_TOOLTIP"] = "Add a final, catch-all condition to the if block.";
BlocklyMsg["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
BlocklyMsg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Return true if both inputs equal each other.";
BlocklyMsg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Return true if both inputs are not equal to each other.";
BlocklyMsg["LOGIC_COMPARE_TOOLTIP_LT"] = "Return true if the first input is smaller than the second input.";
BlocklyMsg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Return true if the first input is smaller than or equal to the second input.";
BlocklyMsg["LOGIC_COMPARE_TOOLTIP_GT"] = "Return true if the first input is greater than the second input.";
BlocklyMsg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Return true if the first input is greater than or equal to the second input.";
BlocklyMsg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";
BlocklyMsg["LOGIC_OPERATION_TOOLTIP_AND"] = "Return true if both inputs are true.";
BlocklyMsg["LOGIC_OPERATION_AND"] = "and";
BlocklyMsg["LOGIC_OPERATION_TOOLTIP_OR"] = "Return true if at least one of the inputs is true.";
BlocklyMsg["LOGIC_OPERATION_OR"] = "or";
BlocklyMsg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";
BlocklyMsg["LOGIC_NEGATE_TITLE"] = "not %1";
BlocklyMsg["LOGIC_NEGATE_TOOLTIP"] = "Returns true if the input is false. Returns false if the input is true.";
BlocklyMsg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";
BlocklyMsg["LOGIC_BOOLEAN_TRUE"] = "true";
BlocklyMsg["LOGIC_BOOLEAN_FALSE"] = "false";
BlocklyMsg["LOGIC_BOOLEAN_TOOLTIP"] = "Returns either true or false.";
BlocklyMsg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
BlocklyMsg["LOGIC_NULL"] = "null";
BlocklyMsg["LOGIC_NULL_TOOLTIP"] = "Returns null.";
BlocklyMsg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";
BlocklyMsg["LOGIC_TERNARY_CONDITION"] = "test";
BlocklyMsg["LOGIC_TERNARY_IF_TRUE"] = "if true";
BlocklyMsg["LOGIC_TERNARY_IF_FALSE"] = "if false";
BlocklyMsg["LOGIC_TERNARY_TOOLTIP"] = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
BlocklyMsg["MATH_NUMBER_HELPURL"] = "https://en.wikipedia.org/wiki/Number";
BlocklyMsg["MATH_NUMBER_TOOLTIP"] = "A number.";
BlocklyMsg["MATH_ADDITION_SYMBOL"] = "+";
BlocklyMsg["MATH_SUBTRACTION_SYMBOL"] = "-";
BlocklyMsg["MATH_DIVISION_SYMBOL"] = "รท";
BlocklyMsg["MATH_MULTIPLICATION_SYMBOL"] = "ร";
BlocklyMsg["MATH_POWER_SYMBOL"] = "^";
BlocklyMsg["MATH_TRIG_SIN"] = "sin";
BlocklyMsg["MATH_TRIG_COS"] = "cos";
BlocklyMsg["MATH_TRIG_TAN"] = "tan";
BlocklyMsg["MATH_TRIG_ASIN"] = "asin";
BlocklyMsg["MATH_TRIG_ACOS"] = "acos";
BlocklyMsg["MATH_TRIG_ATAN"] = "atan";
BlocklyMsg["MATH_ARITHMETIC_HELPURL"] = "https://en.wikipedia.org/wiki/Arithmetic";
BlocklyMsg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Return the sum of the two numbers.";
BlocklyMsg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Return the difference of the two numbers.";
BlocklyMsg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Return the product of the two numbers.";
BlocklyMsg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Return the quotient of the two numbers.";
BlocklyMsg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Return the first number raised to the power of the second number.";
BlocklyMsg["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
BlocklyMsg["MATH_SINGLE_OP_ROOT"] = "square root";
BlocklyMsg["MATH_SINGLE_TOOLTIP_ROOT"] = "Return the square root of a number.";
BlocklyMsg["MATH_SINGLE_OP_ABSOLUTE"] = "absolute";
BlocklyMsg["MATH_SINGLE_TOOLTIP_ABS"] = "Return the absolute value of a number.";
BlocklyMsg["MATH_SINGLE_TOOLTIP_NEG"] = "Return the negation of a number.";
BlocklyMsg["MATH_SINGLE_TOOLTIP_LN"] = "Return the natural logarithm of a number.";
BlocklyMsg["MATH_SINGLE_TOOLTIP_LOG10"] = "Return the base 10 logarithm of a number.";
BlocklyMsg["MATH_SINGLE_TOOLTIP_EXP"] = "Return e to the power of a number.";
BlocklyMsg["MATH_SINGLE_TOOLTIP_POW10"] = "Return 10 to the power of a number.";
BlocklyMsg["MATH_TRIG_HELPURL"] = "https://en.wikipedia.org/wiki/Trigonometric_functions";
BlocklyMsg["MATH_TRIG_TOOLTIP_SIN"] = "Return the sine of a degree (not radian).";
BlocklyMsg["MATH_TRIG_TOOLTIP_COS"] = "Return the cosine of a degree (not radian).";
BlocklyMsg["MATH_TRIG_TOOLTIP_TAN"] = "Return the tangent of a degree (not radian).";
BlocklyMsg["MATH_TRIG_TOOLTIP_ASIN"] = "Return the arcsine of a number.";
BlocklyMsg["MATH_TRIG_TOOLTIP_ACOS"] = "Return the arccosine of a number.";
BlocklyMsg["MATH_TRIG_TOOLTIP_ATAN"] = "Return the arctangent of a number.";
BlocklyMsg["MATH_CONSTANT_HELPURL"] = "https://en.wikipedia.org/wiki/Mathematical_constant";
BlocklyMsg["MATH_CONSTANT_TOOLTIP"] = "Return one of the common constants: ฯ (3.141โฆ), e (2.718โฆ), ฯ (1.618โฆ), sqrt(2) (1.414โฆ), sqrt(ยฝ) (0.707โฆ), or โ (infinity).";
BlocklyMsg["MATH_IS_EVEN"] = "is even";
BlocklyMsg["MATH_IS_ODD"] = "is odd";
BlocklyMsg["MATH_IS_PRIME"] = "is prime";
BlocklyMsg["MATH_IS_WHOLE"] = "is whole";
BlocklyMsg["MATH_IS_POSITIVE"] = "is positive";
BlocklyMsg["MATH_IS_NEGATIVE"] = "is negative";
BlocklyMsg["MATH_IS_DIVISIBLE_BY"] = "is divisible by";
BlocklyMsg["MATH_IS_TOOLTIP"] = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
BlocklyMsg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
BlocklyMsg["MATH_CHANGE_TITLE"] = "change %1 by %2";
BlocklyMsg["MATH_CHANGE_TOOLTIP"] = "Add a number to variable '%1'.";
BlocklyMsg["MATH_ROUND_HELPURL"] = "https://en.wikipedia.org/wiki/Rounding";
BlocklyMsg["MATH_ROUND_TOOLTIP"] = "Round a number up or down.";
BlocklyMsg["MATH_ROUND_OPERATOR_ROUND"] = "round";
BlocklyMsg["MATH_ROUND_OPERATOR_ROUNDUP"] = "round up";
BlocklyMsg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "round down";
BlocklyMsg["MATH_ONLIST_HELPURL"] = "";
BlocklyMsg["MATH_ONLIST_OPERATOR_SUM"] = "sum of list";
BlocklyMsg["MATH_ONLIST_TOOLTIP_SUM"] = "Return the sum of all the numbers in the list.";
BlocklyMsg["MATH_ONLIST_OPERATOR_MIN"] = "min of list";
BlocklyMsg["MATH_ONLIST_TOOLTIP_MIN"] = "Return the smallest number in the list.";
BlocklyMsg["MATH_ONLIST_OPERATOR_MAX"] = "max of list";
BlocklyMsg["MATH_ONLIST_TOOLTIP_MAX"] = "Return the largest number in the list.";
BlocklyMsg["MATH_ONLIST_OPERATOR_AVERAGE"] = "average of list";
BlocklyMsg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Return the average (arithmetic mean) of the numeric values in the list.";
BlocklyMsg["MATH_ONLIST_OPERATOR_MEDIAN"] = "median of list";
BlocklyMsg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Return the median number in the list.";
BlocklyMsg["MATH_ONLIST_OPERATOR_MODE"] = "modes of list";
BlocklyMsg["MATH_ONLIST_TOOLTIP_MODE"] = "Return a list of the most common item(s) in the list.";
BlocklyMsg["MATH_ONLIST_OPERATOR_STD_DEV"] = "standard deviation of list";
BlocklyMsg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Return the standard deviation of the list.";
BlocklyMsg["MATH_ONLIST_OPERATOR_RANDOM"] = "random item of list";
BlocklyMsg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Return a random element from the list.";
BlocklyMsg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
BlocklyMsg["MATH_MODULO_TITLE"] = "remainder of %1 รท %2";
BlocklyMsg["MATH_MODULO_TOOLTIP"] = "Return the remainder from dividing the two numbers.";
BlocklyMsg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";
BlocklyMsg["MATH_CONSTRAIN_TITLE"] = "constrain %1 low %2 high %3";
BlocklyMsg["MATH_CONSTRAIN_TOOLTIP"] = "Constrain a number to be between the specified limits (inclusive).";
BlocklyMsg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
BlocklyMsg["MATH_RANDOM_INT_TITLE"] = "random integer from %1 to %2";
BlocklyMsg["MATH_RANDOM_INT_TOOLTIP"] = "Return a random integer between the two specified limits, inclusive.";
BlocklyMsg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
BlocklyMsg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "random fraction";
BlocklyMsg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
BlocklyMsg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
BlocklyMsg["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";
BlocklyMsg["MATH_ATAN2_TOOLTIP"] = "Return the arctangent of point (X, Y) in degrees from -180 to 180.";
BlocklyMsg["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
BlocklyMsg["TEXT_TEXT_TOOLTIP"] = "A letter, word, or line of text.";
BlocklyMsg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";
BlocklyMsg["TEXT_JOIN_TITLE_CREATEWITH"] = "create text with";
BlocklyMsg["TEXT_JOIN_TOOLTIP"] = "Create a piece of text by joining together any number of items.";
BlocklyMsg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "join";
BlocklyMsg["TEXT_CREATE_JOIN_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this text block.";
BlocklyMsg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Add an item to the text.";
BlocklyMsg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
BlocklyMsg["TEXT_APPEND_TITLE"] = "to %1 append text %2";
BlocklyMsg["TEXT_APPEND_TOOLTIP"] = "Append some text to variable '%1'.";
BlocklyMsg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
BlocklyMsg["TEXT_LENGTH_TITLE"] = "length of %1";
BlocklyMsg["TEXT_LENGTH_TOOLTIP"] = "Returns the number of letters (including spaces) in the provided text.";
BlocklyMsg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
BlocklyMsg["TEXT_ISEMPTY_TITLE"] = "%1 is empty";
BlocklyMsg["TEXT_ISEMPTY_TOOLTIP"] = "Returns true if the provided text is empty.";
BlocklyMsg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";
BlocklyMsg["TEXT_INDEXOF_TOOLTIP"] = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";
BlocklyMsg["TEXT_INDEXOF_TITLE"] = "in text %1 %2 %3";
BlocklyMsg["TEXT_INDEXOF_OPERATOR_FIRST"] = "find first occurrence of text";
BlocklyMsg["TEXT_INDEXOF_OPERATOR_LAST"] = "find last occurrence of text";
BlocklyMsg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";
BlocklyMsg["TEXT_CHARAT_TITLE"] = "in text %1 %2";
BlocklyMsg["TEXT_CHARAT_FROM_START"] = "get letter #";
BlocklyMsg["TEXT_CHARAT_FROM_END"] = "get letter # from end";
BlocklyMsg["TEXT_CHARAT_FIRST"] = "get first letter";
BlocklyMsg["TEXT_CHARAT_LAST"] = "get last letter";
BlocklyMsg["TEXT_CHARAT_RANDOM"] = "get random letter";
BlocklyMsg["TEXT_CHARAT_TAIL"] = "";
BlocklyMsg["TEXT_CHARAT_TOOLTIP"] = "Returns the letter at the specified position.";
BlocklyMsg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Returns a specified portion of the text.";
BlocklyMsg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
BlocklyMsg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "in text";
BlocklyMsg["TEXT_GET_SUBSTRING_START_FROM_START"] = "get substring from letter #";
BlocklyMsg["TEXT_GET_SUBSTRING_START_FROM_END"] = "get substring from letter # from end";
BlocklyMsg["TEXT_GET_SUBSTRING_START_FIRST"] = "get substring from first letter";
BlocklyMsg["TEXT_GET_SUBSTRING_END_FROM_START"] = "to letter #";
BlocklyMsg["TEXT_GET_SUBSTRING_END_FROM_END"] = "to letter # from end";
BlocklyMsg["TEXT_GET_SUBSTRING_END_LAST"] = "to last letter";
BlocklyMsg["TEXT_GET_SUBSTRING_TAIL"] = "";
BlocklyMsg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
BlocklyMsg["TEXT_CHANGECASE_TOOLTIP"] = "Return a copy of the text in a different case.";
BlocklyMsg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "to UPPER CASE";
BlocklyMsg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "to lower case";
BlocklyMsg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "to Title Case";
BlocklyMsg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
BlocklyMsg["TEXT_TRIM_TOOLTIP"] = "Return a copy of the text with spaces removed from one or both ends.";
BlocklyMsg["TEXT_TRIM_OPERATOR_BOTH"] = "trim spaces from both sides of";
BlocklyMsg["TEXT_TRIM_OPERATOR_LEFT"] = "trim spaces from left side of";
BlocklyMsg["TEXT_TRIM_OPERATOR_RIGHT"] = "trim spaces from right side of";
BlocklyMsg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
BlocklyMsg["TEXT_PRINT_TITLE"] = "print %1";
BlocklyMsg["TEXT_PRINT_TOOLTIP"] = "Print the specified text, number or other value.";
BlocklyMsg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
BlocklyMsg["TEXT_PROMPT_TYPE_TEXT"] = "prompt for text with message";
BlocklyMsg["TEXT_PROMPT_TYPE_NUMBER"] = "prompt for number with message";
BlocklyMsg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Prompt for user for a number.";
BlocklyMsg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Prompt for user for some text.";
BlocklyMsg["TEXT_COUNT_MESSAGE0"] = "count %1 in %2";
BlocklyMsg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
BlocklyMsg["TEXT_COUNT_TOOLTIP"] = "Count how many times some text occurs within some other text.";
BlocklyMsg["TEXT_REPLACE_MESSAGE0"] = "replace %1 with %2 in %3";
BlocklyMsg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
BlocklyMsg["TEXT_REPLACE_TOOLTIP"] = "Replace all occurances of some text within some other text.";
BlocklyMsg["TEXT_REVERSE_MESSAGE0"] = "reverse %1";
BlocklyMsg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
BlocklyMsg["TEXT_REVERSE_TOOLTIP"] = "Reverses the order of the characters in the text.";
BlocklyMsg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
BlocklyMsg["LISTS_CREATE_EMPTY_TITLE"] = "create empty list";
BlocklyMsg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returns a list, of length 0, containing no data records";
BlocklyMsg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
BlocklyMsg["LISTS_CREATE_WITH_TOOLTIP"] = "Create a list with any number of items.";
BlocklyMsg["LISTS_CREATE_WITH_INPUT_WITH"] = "create list with";
BlocklyMsg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "list";
BlocklyMsg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this list block.";
BlocklyMsg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Add an item to the list.";
BlocklyMsg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
BlocklyMsg["LISTS_REPEAT_TOOLTIP"] = "Creates a list consisting of the given value repeated the specified number of times.";
BlocklyMsg["LISTS_REPEAT_TITLE"] = "create list with item %1 repeated %2 times";
BlocklyMsg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";
BlocklyMsg["LISTS_LENGTH_TITLE"] = "length of %1";
BlocklyMsg["LISTS_LENGTH_TOOLTIP"] = "Returns the length of a list.";
BlocklyMsg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";
BlocklyMsg["LISTS_ISEMPTY_TITLE"] = "%1 is empty";
BlocklyMsg["LISTS_ISEMPTY_TOOLTIP"] = "Returns true if the list is empty.";
BlocklyMsg["LISTS_INLIST"] = "in list";
BlocklyMsg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
BlocklyMsg["LISTS_INDEX_OF_FIRST"] = "find first occurrence of item";
BlocklyMsg["LISTS_INDEX_OF_LAST"] = "find last occurrence of item";
BlocklyMsg["LISTS_INDEX_OF_TOOLTIP"] = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";
BlocklyMsg["LISTS_GET_INDEX_GET"] = "get";
BlocklyMsg["LISTS_GET_INDEX_GET_REMOVE"] = "get and remove";
BlocklyMsg["LISTS_GET_INDEX_REMOVE"] = "remove";
BlocklyMsg["LISTS_GET_INDEX_FROM_START"] = "#";
BlocklyMsg["LISTS_GET_INDEX_FROM_END"] = "# from end";
BlocklyMsg["LISTS_GET_INDEX_FIRST"] = "first";
BlocklyMsg["LISTS_GET_INDEX_LAST"] = "last";
BlocklyMsg["LISTS_GET_INDEX_RANDOM"] = "random";
BlocklyMsg["LISTS_GET_INDEX_TAIL"] = "";
BlocklyMsg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 is the first item.";
BlocklyMsg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 is the last item.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Returns the item at the specified position in a list.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Returns the first item in a list.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Returns the last item in a list.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Returns a random item in a list.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Removes and returns the item at the specified position in a list.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Removes and returns the first item in a list.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Removes and returns the last item in a list.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Removes and returns a random item in a list.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Removes the item at the specified position in a list.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Removes the first item in a list.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Removes the last item in a list.";
BlocklyMsg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Removes a random item in a list.";
BlocklyMsg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";
BlocklyMsg["LISTS_SET_INDEX_SET"] = "set";
BlocklyMsg["LISTS_SET_INDEX_INSERT"] = "insert at";
BlocklyMsg["LISTS_SET_INDEX_INPUT_TO"] = "as";
BlocklyMsg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Sets the item at the specified position in a list.";
BlocklyMsg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Sets the first item in a list.";
BlocklyMsg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Sets the last item in a list.";
BlocklyMsg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Sets a random item in a list.";
BlocklyMsg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserts the item at the specified position in a list.";
BlocklyMsg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserts the item at the start of a list.";
BlocklyMsg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Append the item to the end of a list.";
BlocklyMsg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserts the item randomly in a list.";
BlocklyMsg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
BlocklyMsg["LISTS_GET_SUBLIST_START_FROM_START"] = "get sub-list from #";
BlocklyMsg["LISTS_GET_SUBLIST_START_FROM_END"] = "get sub-list from # from end";
BlocklyMsg["LISTS_GET_SUBLIST_START_FIRST"] = "get sub-list from first";
BlocklyMsg["LISTS_GET_SUBLIST_END_FROM_START"] = "to #";
BlocklyMsg["LISTS_GET_SUBLIST_END_FROM_END"] = "to # from end";
BlocklyMsg["LISTS_GET_SUBLIST_END_LAST"] = "to last";
BlocklyMsg["LISTS_GET_SUBLIST_TAIL"] = "";
BlocklyMsg["LISTS_GET_SUBLIST_TOOLTIP"] = "Creates a copy of the specified portion of a list.";
BlocklyMsg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
BlocklyMsg["LISTS_SORT_TITLE"] = "sort %1 %2 %3";
BlocklyMsg["LISTS_SORT_TOOLTIP"] = "Sort a copy of a list.";
BlocklyMsg["LISTS_SORT_ORDER_ASCENDING"] = "ascending";
BlocklyMsg["LISTS_SORT_ORDER_DESCENDING"] = "descending";
BlocklyMsg["LISTS_SORT_TYPE_NUMERIC"] = "numeric";
BlocklyMsg["LISTS_SORT_TYPE_TEXT"] = "alphabetic";
BlocklyMsg["LISTS_SORT_TYPE_IGNORECASE"] = "alphabetic, ignore case";
BlocklyMsg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
BlocklyMsg["LISTS_SPLIT_LIST_FROM_TEXT"] = "make list from text";
BlocklyMsg["LISTS_SPLIT_TEXT_FROM_LIST"] = "make text from list";
BlocklyMsg["LISTS_SPLIT_WITH_DELIMITER"] = "with delimiter";
BlocklyMsg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Split text into a list of texts, breaking at each delimiter.";
BlocklyMsg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Join a list of texts into one text, separated by a delimiter.";
BlocklyMsg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
BlocklyMsg["LISTS_REVERSE_MESSAGE0"] = "reverse %1";
BlocklyMsg["LISTS_REVERSE_TOOLTIP"] = "Reverse a copy of a list.";
BlocklyMsg["ORDINAL_NUMBER_SUFFIX"] = "";
BlocklyMsg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";
BlocklyMsg["VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";
BlocklyMsg["VARIABLES_GET_CREATE_SET"] = "Create 'set %1'";
BlocklyMsg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";
BlocklyMsg["VARIABLES_SET"] = "set %1 to %2";
BlocklyMsg["VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";
BlocklyMsg["VARIABLES_SET_CREATE_GET"] = "Create 'get %1'";
BlocklyMsg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
BlocklyMsg["PROCEDURES_DEFNORETURN_TITLE"] = "to";
BlocklyMsg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "do something";
BlocklyMsg["PROCEDURES_BEFORE_PARAMS"] = "with:";
BlocklyMsg["PROCEDURES_CALL_BEFORE_PARAMS"] = "with:";
BlocklyMsg["PROCEDURES_DEFNORETURN_DO"] = "";
BlocklyMsg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Creates a function with no output.";
BlocklyMsg["PROCEDURES_DEFNORETURN_COMMENT"] = "Describe this function...";
BlocklyMsg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
BlocklyMsg["PROCEDURES_DEFRETURN_RETURN"] = "return";
BlocklyMsg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Creates a function with an output.";
BlocklyMsg["PROCEDURES_ALLOW_STATEMENTS"] = "allow statements";
BlocklyMsg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Warning: This function has duplicate parameters.";
BlocklyMsg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
BlocklyMsg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Run the user-defined function '%1'.";
BlocklyMsg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
BlocklyMsg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Run the user-defined function '%1' and use its output.";
BlocklyMsg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "inputs";
BlocklyMsg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Add, remove, or reorder inputs to this function.";
BlocklyMsg["PROCEDURES_MUTATORARG_TITLE"] = "input name:";
BlocklyMsg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Add an input to the function.";
BlocklyMsg["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";
BlocklyMsg["PROCEDURES_CREATE_DO"] = "Create '%1'";
BlocklyMsg["PROCEDURES_IFRETURN_TOOLTIP"] = "If a value is true, then return a second value.";
BlocklyMsg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
BlocklyMsg["PROCEDURES_IFRETURN_WARNING"] = "Warning: This block may be used only within a function definition.";
BlocklyMsg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Say something...";
BlocklyMsg["WORKSPACE_ARIA_LABEL"] = "Blockly Workspace";
BlocklyMsg["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";
BlocklyMsg["DIALOG_OK"] = "OK";
BlocklyMsg["DIALOG_CANCEL"] = "Cancel";

BlocklyMsg["CONTROLS_WHILEUNTIL_INPUT_DO"] = "do";
BlocklyMsg["CONTROLS_FOR_INPUT_DO"] = "do";
BlocklyMsg["CONTROLS_FOREACH_INPUT_DO"] = "do";
BlocklyMsg["CONTROLS_IF_MSG_THEN"] = "do";
BlocklyMsg["CONTROLS_IF_IF_TITLE_IF"] = "if";
BlocklyMsg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = "else if";
BlocklyMsg["CONTROLS_IF_ELSE_TITLE_ELSE"] = "else";
BlocklyMsg["MATH_CHANGE_TITLE_ITEM"] = "item";
BlocklyMsg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = "item";
BlocklyMsg["TEXT_APPEND_VARIABLE"] = "item";
BlocklyMsg["LISTS_CREATE_WITH_ITEM_TITLE"] = "item";
BlocklyMsg["LISTS_INDEX_OF_INPUT_IN_LIST"] = "in list";
BlocklyMsg["LISTS_GET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
BlocklyMsg["LISTS_GET_INDEX_INPUT_IN_LIST"] = "in list";
BlocklyMsg["LISTS_SET_INDEX_INPUT_IN_LIST"] = "in list";
BlocklyMsg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = "in list";
BlocklyMsg["PROCEDURES_DEFRETURN_TITLE"] = "to";
BlocklyMsg["PROCEDURES_DEFRETURN_PROCEDURE"] = "do something";
BlocklyMsg["PROCEDURES_DEFRETURN_DO"] = "";
BlocklyMsg["PROCEDURES_DEFRETURN_COMMENT"] = "Describe this function...";

BlocklyMsg["LOGIC_HUE"] = "210";
BlocklyMsg["LOOPS_HUE"] = "120";
BlocklyMsg["MATH_HUE"] = "230";
BlocklyMsg["TEXTS_HUE"] = "160";
BlocklyMsg["LISTS_HUE"] = "260";
BlocklyMsg["COLOUR_HUE"] = "20";
BlocklyMsg["VARIABLES_HUE"] = "330";
BlocklyMsg["VARIABLES_DYNAMIC_HUE"] = "310";
BlocklyMsg["PROCEDURES_HUE"] = "290";

BlocklyGamesMsg["Games.name"] = "Blockly Games";
BlocklyGamesMsg["Games.puzzle"] = "Puzzle";
BlocklyGamesMsg["Games.maze"] = "Maze";
BlocklyGamesMsg["Games.bird"] = "Bird";
BlocklyGamesMsg["Games.turtle"] = "Turtle";
BlocklyGamesMsg["Games.movie"] = "Movie";
BlocklyGamesMsg["Games.music"] = "Music";
BlocklyGamesMsg["Games.pondTutor"] = "Pond Tutor";
BlocklyGamesMsg["Games.pond"] = "Pond";
BlocklyGamesMsg["Games.linesOfCode1"] = "You solved this level with 1 line of JavaScript:";
BlocklyGamesMsg["Games.linesOfCode2"] = "You solved this level with %1 lines of JavaScript:";
BlocklyGamesMsg["Games.nextLevel"] = "Are you ready for level %1?";
BlocklyGamesMsg["Games.finalLevel"] = "Are you ready for the next challenge?";
BlocklyGamesMsg["Games.submitTitle"] = "Title:";
BlocklyGamesMsg["Games.linkTooltip"] = "Save and link to blocks.";
BlocklyGamesMsg["Games.runTooltip"] = "Run the program you wrote.";
BlocklyGamesMsg["Games.runProgram"] = "Run Program";
BlocklyGamesMsg["Games.resetTooltip"] = "Stop the program and reset the level.";
BlocklyGamesMsg["Games.resetProgram"] = "Reset";
BlocklyGamesMsg["Games.help"] = "Help";
BlocklyGamesMsg["Games.catLogic"] = "Logic";
BlocklyGamesMsg["Games.catLoops"] = "Loops";
BlocklyGamesMsg["Games.catMath"] = "Math";
BlocklyGamesMsg["Games.catText"] = "Text";
BlocklyGamesMsg["Games.catLists"] = "Lists";
BlocklyGamesMsg["Games.catColour"] = "Colour";
BlocklyGamesMsg["Games.catVariables"] = "Variables";
BlocklyGamesMsg["Games.catProcedures"] = "Functions";
BlocklyGamesMsg["Games.httpRequestError"] = "There was a problem with the request.";
BlocklyGamesMsg["Games.linkAlert"] = "Share your blocks with this link:\n\n%1";
BlocklyGamesMsg["Games.hashError"] = "Sorry, '%1' doesn't correspond with any saved program.";
BlocklyGamesMsg["Games.xmlError"] = "Could not load your saved file. Perhaps it was created with a different version of Blockly?";
BlocklyGamesMsg["Games.submitted"] = "Thank you for this program!  If our staff of trained monkeys like it, they will publish it to the gallery within a couple of days.";
BlocklyGamesMsg["Games.listVariable"] = "list";
BlocklyGamesMsg["Games.textVariable"] = "text";
BlocklyGamesMsg["Games.breakLink"] = "Once you start editing JavaScript, you can't go back to editing blocks. Is this OK?";
BlocklyGamesMsg["Games.blocks"] = "Blocks";
BlocklyGamesMsg["Games.congratulations"] = "Congratulations!";
BlocklyGamesMsg["Games.helpAbort"] = "This level is extremely difficult. Would you like to skip it and go onto the next game? You can always come back later.";
BlocklyGamesMsg["Index.clear"] = "Delete all your solutions?";
BlocklyGamesMsg["Index.subTitle"] = "Games for tomorrow's programmers.";
BlocklyGamesMsg["Index.moreInfo"] = "Info for educators...";
BlocklyGamesMsg["Index.startOver"] = "Want to start over?";
BlocklyGamesMsg["Index.clearData"] = "Clear data";
BlocklyGamesMsg["Puzzle.animal1"] = "Duck";
BlocklyGamesMsg["Puzzle.animal1Trait1"] = "Feathers";
BlocklyGamesMsg["Puzzle.animal1Trait2"] = "Beak";
BlocklyGamesMsg["Puzzle.animal1HelpUrl"] = "https://en.wikipedia.org/wiki/Duck";
BlocklyGamesMsg["Puzzle.animal2"] = "Cat";
BlocklyGamesMsg["Puzzle.animal2Trait1"] = "Whiskers";
BlocklyGamesMsg["Puzzle.animal2Trait2"] = "Fur";
BlocklyGamesMsg["Puzzle.animal2HelpUrl"] = "https://en.wikipedia.org/wiki/Cat";
BlocklyGamesMsg["Puzzle.animal3"] = "Bee";
BlocklyGamesMsg["Puzzle.animal3Trait1"] = "Honey";
BlocklyGamesMsg["Puzzle.animal3Trait2"] = "Stinger";
BlocklyGamesMsg["Puzzle.animal3HelpUrl"] = "https://en.wikipedia.org/wiki/Bee";
BlocklyGamesMsg["Puzzle.animal4"] = "Snail";
BlocklyGamesMsg["Puzzle.animal4Trait1"] = "Shell";
BlocklyGamesMsg["Puzzle.animal4Trait2"] = "Slime";
BlocklyGamesMsg["Puzzle.animal4HelpUrl"] = "https://en.wikipedia.org/wiki/Snail";
BlocklyGamesMsg["Puzzle.picture"] = "picture:";
BlocklyGamesMsg["Puzzle.legs"] = "legs:";
BlocklyGamesMsg["Puzzle.legsChoose"] = "choose...";
BlocklyGamesMsg["Puzzle.traits"] = "traits:";
BlocklyGamesMsg["Puzzle.error0"] = "Perfect!\nAll %1 blocks are correct.";
BlocklyGamesMsg["Puzzle.error1"] = "Almost! One block is incorrect.";
BlocklyGamesMsg["Puzzle.error2"] = "%1 blocks are incorrect.";
BlocklyGamesMsg["Puzzle.tryAgain"] = "The highlighted block is not correct.\nKeep trying.";
BlocklyGamesMsg["Puzzle.checkAnswers"] = "Check Answers";
BlocklyGamesMsg["Puzzle.helpText"] = "For each animal (green), attach its picture, choose its number of legs, and make a stack of its traits.";
BlocklyGamesMsg["Maze.moveForward"] = "move forward";
BlocklyGamesMsg["Maze.turnLeft"] = "turn left";
BlocklyGamesMsg["Maze.turnRight"] = "turn right";
BlocklyGamesMsg["Maze.doCode"] = "do";
BlocklyGamesMsg["Maze.elseCode"] = "else";
BlocklyGamesMsg["Maze.helpIfElse"] = "If-else blocks will do one thing or the other.";
BlocklyGamesMsg["Maze.pathAhead"] = "if path ahead";
BlocklyGamesMsg["Maze.pathLeft"] = "if path to the left";
BlocklyGamesMsg["Maze.pathRight"] = "if path to the right";
BlocklyGamesMsg["Maze.repeatUntil"] = "repeat until";
BlocklyGamesMsg["Maze.moveForwardTooltip"] = "Moves the player forward one space.";
BlocklyGamesMsg["Maze.turnTooltip"] = "Turns the player left or right by 90 degrees.";
BlocklyGamesMsg["Maze.ifTooltip"] = "If there is a path in the specified direction, then do some actions.";
BlocklyGamesMsg["Maze.ifelseTooltip"] = "If there is a path in the specified direction, then do the first block of actions. Otherwise, do the second block of actions.";
BlocklyGamesMsg["Maze.whileTooltip"] = "Repeat the enclosed actions until finish point is reached.";
BlocklyGamesMsg["Maze.capacity0"] = "You have %0 blocks left.";
BlocklyGamesMsg["Maze.capacity1"] = "You have %1 block left.";
BlocklyGamesMsg["Maze.capacity2"] = "You have %2 blocks left.";
BlocklyGamesMsg["Maze.runTooltip"] = "Makes the player do what the blocks say.";
BlocklyGamesMsg["Maze.resetTooltip"] = "Put the player back at the start of the maze.";
BlocklyGamesMsg["Maze.helpStack"] = "Stack a couple of 'move forward' blocks together to help me reach the goal.";
BlocklyGamesMsg["Maze.helpOneTopBlock"] = "On this level, you need to stack together all of the blocks in the white workspace.";
BlocklyGamesMsg["Maze.helpRun"] = "Run your program to see what happens.";
BlocklyGamesMsg["Maze.helpReset"] = "Your program didn't solve the maze. Press 'Reset' and try again.";
BlocklyGamesMsg["Maze.helpRepeat"] = "Reach the end of this path using only two blocks. Use 'repeat' to run a block more than once.";
BlocklyGamesMsg["Maze.helpCapacity"] = "You have used up all the blocks for this level. To create a new block, you first need to delete an existing block.";
BlocklyGamesMsg["Maze.helpRepeatMany"] = "You can fit more than one block inside a 'repeat' block.";
BlocklyGamesMsg["Maze.helpSkins"] = "Choose your favourite player from this menu.";
BlocklyGamesMsg["Maze.helpIf"] = "An 'if' block will do something only if the condition is true. Try turning left if there is a path to the left.";
BlocklyGamesMsg["Maze.helpMenu"] = "Click on %1 in the 'if' block to change its condition.";
BlocklyGamesMsg["Maze.helpWallFollow"] = "Can you solve this complicated maze? Try following the left-hand wall. Advanced programmers only!";
BlocklyGamesMsg["Bird.noWorm"] = "does not have worm";
BlocklyGamesMsg["Bird.heading"] = "heading";
BlocklyGamesMsg["Bird.noWormTooltip"] = "The condition when the bird has not gotten the worm.";
BlocklyGamesMsg["Bird.headingTooltip"] = "Move in the direction of the given angle: 0 is to the right, 90 is straight up, etc.";
BlocklyGamesMsg["Bird.positionTooltip"] = "x and y mark the bird's position. When x = 0 the bird is near the left edge, when x = 100 it's near the right edge. When y = 0 the bird is at the bottom, when y = 100 it's at the top.";
BlocklyGamesMsg["Bird.helpHeading"] = "Change the heading angle to make the bird get the worm and land in her nest.";
BlocklyGamesMsg["Bird.helpHasWorm"] = "Use this block to go in one heading if you have the worm, or a different heading if you don't have the worm.";
BlocklyGamesMsg["Bird.helpX"] = "'x' is your current horizontal position. Use this block to go in one heading if 'x' is less than a number, or a different heading otherwise.";
BlocklyGamesMsg["Bird.helpElse"] = "Click the icon to modify the 'if' block.";
BlocklyGamesMsg["Bird.helpElseIf"] = "This level needs both an 'else if' and an 'else' block.";
BlocklyGamesMsg["Bird.helpAnd"] = "The 'and' block is true only if both its inputs are true.";
BlocklyGamesMsg["Bird.helpMutator"] = "Drag an 'else' block into the 'if' block.";
BlocklyGamesMsg["Turtle.moveTooltip"] = "Moves the turtle forward or backward by the specified amount.";
BlocklyGamesMsg["Turtle.moveForward"] = "move forward by";
BlocklyGamesMsg["Turtle.moveBackward"] = "move backward by";
BlocklyGamesMsg["Turtle.goto"] = "go to";
BlocklyGamesMsg["Turtle.gotoTooltip"] = "Moves the turtle directly to the x and y coordinates.";
BlocklyGamesMsg["Turtle.direction"] = "point in direction";
BlocklyGamesMsg["Turtle.directionTooltip"] = "Turns the turtle to the direction (angle) given.";
BlocklyGamesMsg["Turtle.turnTooltip"] = "Turns the turtle left or right by the specified number of degrees.";
BlocklyGamesMsg["Turtle.turnRight"] = "turn right by";
BlocklyGamesMsg["Turtle.turnLeft"] = "turn left by";
BlocklyGamesMsg["Turtle.widthTooltip"] = "Changes the width of the pen.";
BlocklyGamesMsg["Turtle.setWidth"] = "set width to";
BlocklyGamesMsg["Turtle.colourTooltip"] = "Changes the colour of the pen.";
BlocklyGamesMsg["Turtle.setColour"] = "set colour to";
BlocklyGamesMsg["Turtle.penTooltip"] = "Lifts or lowers the pen, to stop or start drawing.";
BlocklyGamesMsg["Turtle.penUp"] = "pen up";
BlocklyGamesMsg["Turtle.penDown"] = "pen down";
BlocklyGamesMsg["Turtle.turtleVisibilityTooltip"] = "Makes the turtle (circle and arrow) visible or invisible.";
BlocklyGamesMsg["Turtle.hideTurtle"] = "hide turtle";
BlocklyGamesMsg["Turtle.showTurtle"] = "show turtle";
BlocklyGamesMsg["Turtle.printHelpUrl"] = "https://en.wikipedia.org/wiki/Printing";
BlocklyGamesMsg["Turtle.printTooltip"] = "Draws text in the turtle's direction at its location.";
BlocklyGamesMsg["Turtle.print"] = "print";
BlocklyGamesMsg["Turtle.fontHelpUrl"] = "https://en.wikipedia.org/wiki/Font";
BlocklyGamesMsg["Turtle.fontTooltip"] = "Sets the font used by the print block.";
BlocklyGamesMsg["Turtle.font"] = "font";
BlocklyGamesMsg["Turtle.fontSize"] = "font size";
BlocklyGamesMsg["Turtle.fontNormal"] = "normal";
BlocklyGamesMsg["Turtle.fontBold"] = "bold";
BlocklyGamesMsg["Turtle.fontItalic"] = "italic";
BlocklyGamesMsg["Turtle.submitDisabled"] = "Run your program until it stops. Then you may submit your drawing to the gallery.";
BlocklyGamesMsg["Turtle.galleryTooltip"] = "Open the gallery of drawings.";
BlocklyGamesMsg["Turtle.galleryMsg"] = "See Gallery";
BlocklyGamesMsg["Turtle.submitTooltip"] = "Submit your drawing to the gallery.";
BlocklyGamesMsg["Turtle.submitMsg"] = "Submit to Gallery";
BlocklyGamesMsg["Turtle.helpUseLoop"] = "Your solution works, but you can do better.";
BlocklyGamesMsg["Turtle.helpUseLoop3"] = "Draw the shape with just three blocks.";
BlocklyGamesMsg["Turtle.helpUseLoop4"] = "Draw the star with just four blocks.";
BlocklyGamesMsg["Turtle.helpText1"] = "Create a program that draws a square.";
BlocklyGamesMsg["Turtle.helpText2"] = "Change your program to draw a pentagon instead of a square.";
BlocklyGamesMsg["Turtle.helpText3a"] = "There's a new block that allows you to change the colour:";
BlocklyGamesMsg["Turtle.helpText3b"] = "Draw a yellow star.";
BlocklyGamesMsg["Turtle.helpText4a"] = "There's a new block that allows you to lift your pen off the paper when you move:";
BlocklyGamesMsg["Turtle.helpText4b"] = "Draw a small yellow star, then draw a line above it.";
BlocklyGamesMsg["Turtle.helpText5"] = "Instead of one star, can you draw four stars arranged in a square?";
BlocklyGamesMsg["Turtle.helpText6"] = "Draw three yellow stars, and one white line.";
BlocklyGamesMsg["Turtle.helpText7"] = "Draw the stars, then draw four white lines.";
BlocklyGamesMsg["Turtle.helpText8"] = "Drawing 360 white lines will look like the full moon.";
BlocklyGamesMsg["Turtle.helpText9"] = "Can you add a black circle so that the moon becomes a crescent?";
BlocklyGamesMsg["Turtle.helpText10"] = "Draw anything you want. You've got a huge number of new blocks you can explore. Have fun!";
BlocklyGamesMsg["Turtle.helpText10Reddit"] = "Use the 'See Gallery' button to see what other people have drawn. If you draw something interesting, use the 'Submit to Gallery' button to publish it.";
BlocklyGamesMsg["Turtle.helpToolbox"] = "Choose a category to see the blocks.";
BlocklyGamesMsg["Movie.x"] = "x";
BlocklyGamesMsg["Movie.y"] = "y";
BlocklyGamesMsg["Movie.x1"] = "start x";
BlocklyGamesMsg["Movie.y1"] = "start y";
BlocklyGamesMsg["Movie.x2"] = "end x";
BlocklyGamesMsg["Movie.y2"] = "end y";
BlocklyGamesMsg["Movie.radius"] = "radius";
BlocklyGamesMsg["Movie.width"] = "width";
BlocklyGamesMsg["Movie.height"] = "height";
BlocklyGamesMsg["Movie.circleTooltip"] = "Draws a circle at the specified location and with the specified radius.";
BlocklyGamesMsg["Movie.circleDraw"] = "circle";
BlocklyGamesMsg["Movie.rectTooltip"] = "Draws a rectangle at the specified location and with the specified width and height.";
BlocklyGamesMsg["Movie.rectDraw"] = "rectangle";
BlocklyGamesMsg["Movie.lineTooltip"] = "Draws a line from one point to another with the specified width.";
BlocklyGamesMsg["Movie.lineDraw"] = "line";
BlocklyGamesMsg["Movie.timeTooltip"] = "Returns the current time in the animation (0-100).";
BlocklyGamesMsg["Movie.colourTooltip"] = "Changes the colour of the pen.";
BlocklyGamesMsg["Movie.setColour"] = "set colour to";
BlocklyGamesMsg["Movie.submitDisabled"] = "Your movie doesn't move. Use blocks to make something interesting. Then you may submit your movie to the gallery.";
BlocklyGamesMsg["Movie.galleryTooltip"] = "Open the gallery of movies.";
BlocklyGamesMsg["Movie.galleryMsg"] = "See Gallery";
BlocklyGamesMsg["Movie.submitTooltip"] = "Submit your movie to the gallery.";
BlocklyGamesMsg["Movie.submitMsg"] = "Submit to Gallery";
BlocklyGamesMsg["Movie.helpLayer"] = "Move the background circle to the top of your program.  Then it will appear behind the person.";
BlocklyGamesMsg["Movie.helpText1"] = "Use simple shapes to draw this person.";
BlocklyGamesMsg["Movie.helpText2a"] = "This level is a movie. You want the person's arm to move across the screen. Press the play button to see a preview.";
BlocklyGamesMsg["Movie.helpText2b"] = "As the movie plays, the value of the 'time' block counts from 0 to 100. Since you want the 'y' position of the arm to start at 0 and go to 100 this should be easy.";
BlocklyGamesMsg["Movie.helpText3"] = "The 'time' block counts from 0 to 100. But now you want the 'y' position of the other arm to start at 100 and go to 0. Can you figure out a simple mathematical formula that flips the direction?";
BlocklyGamesMsg["Movie.helpText4"] = "Use what you learned in the previous level to make legs that cross.";
BlocklyGamesMsg["Movie.helpText5"] = "The mathematical formula for the arm is complicated. Here's the answer:";
BlocklyGamesMsg["Movie.helpText6"] = "Give the person a couple of hands.";
BlocklyGamesMsg["Movie.helpText7"] = "Use the 'if' block to draw a small head for the first half of the movie. Then draw a big head for the second half of the movie.";
BlocklyGamesMsg["Movie.helpText8"] = "Make the legs reverse direction half way through the movie.";
BlocklyGamesMsg["Movie.helpText9"] = "Draw an expanding circle behind the person.";
BlocklyGamesMsg["Movie.helpText10"] = "Make a movie of anything you want. You've got a huge number of new blocks you can explore. Have fun!";
BlocklyGamesMsg["Movie.helpText10Reddit"] = "Use the 'See Gallery' button to see movies that other people have made. If you make an interesting movie, use the 'Submit to Gallery' button to publish it.";
BlocklyGamesMsg["Music.playNoteTooltip"] = "Plays one musical note of the specified duration and pitch.";
BlocklyGamesMsg["Music.playNote"] = "play %1 note %2";
BlocklyGamesMsg["Music.restTooltip"] = "Waits for the specified duration.";
BlocklyGamesMsg["Music.restWholeTooltip"] = "Waits for one whole note.";
BlocklyGamesMsg["Music.rest"] = "rest %1";
BlocklyGamesMsg["Music.setInstrumentTooltip"] = "Switches to the specified instrument when playing subsequent musical notes.";
BlocklyGamesMsg["Music.setInstrument"] = "set instrument to %1";
BlocklyGamesMsg["Music.startTooltip"] = "Executes the blocks inside when the 'Run Program' button is clicked.";
BlocklyGamesMsg["Music.start"] = "when %1 clicked";
BlocklyGamesMsg["Music.pitchTooltip"] = "One note (C4 is 7).";
BlocklyGamesMsg["Music.firstPart"] = "first part";
BlocklyGamesMsg["Music.piano"] = "piano";
BlocklyGamesMsg["Music.trumpet"] = "trumpet";
BlocklyGamesMsg["Music.banjo"] = "banjo";
BlocklyGamesMsg["Music.violin"] = "violin";
BlocklyGamesMsg["Music.guitar"] = "guitar";
BlocklyGamesMsg["Music.flute"] = "flute";
BlocklyGamesMsg["Music.drum"] = "drum";
BlocklyGamesMsg["Music.choir"] = "choir";
BlocklyGamesMsg["Music.submitDisabled"] = "Run your program until it stops. Then you may submit your music to the gallery.";
BlocklyGamesMsg["Music.galleryTooltip"] = "Open the gallery of music.";
BlocklyGamesMsg["Music.galleryMsg"] = "See Gallery";
BlocklyGamesMsg["Music.submitTooltip"] = "Submit your music to the gallery.";
BlocklyGamesMsg["Music.submitMsg"] = "Submit to Gallery";
BlocklyGamesMsg["Music.helpUseFunctions"] = "Your solution works, but you can do better.  Use functions to reduce the amount of repeated code.";
BlocklyGamesMsg["Music.helpUseInstruments"] = "The music will sound better if you use a different instrument in each start block.";
BlocklyGamesMsg["Music.helpText1"] = "Compose the first four notes of 'Frรจre Jacques'.";
BlocklyGamesMsg["Music.helpText2a"] = "A 'function' allows you to group blocks together, then run them more than once.";
BlocklyGamesMsg["Music.helpText2b"] = "Create a function to play the first four notes of 'Frรจre Jacques'. Run that function twice.  Don't add any new note blocks.";
BlocklyGamesMsg["Music.helpText3"] = "Create a second function for the next part of 'Frรจre Jacques'. The last note is longer.";
BlocklyGamesMsg["Music.helpText4"] = "Create a third function for the next part of 'Frรจre Jacques'. The first four notes are shorter.";
BlocklyGamesMsg["Music.helpText5"] = "Complete the full tune of 'Frรจre Jacques'.";
BlocklyGamesMsg["Music.helpText6a"] = "This new block lets you change to another instrument.";
BlocklyGamesMsg["Music.helpText6b"] = "Play your tune with a violin.";
BlocklyGamesMsg["Music.helpText7a"] = "This new block adds a silent delay.";
BlocklyGamesMsg["Music.helpText7b"] = "Create a second start block that has two delay blocks, then also plays 'Frรจre Jacques'.";
BlocklyGamesMsg["Music.helpText8"] = "Each start block should play 'Frรจre Jacques' twice.";
BlocklyGamesMsg["Music.helpText9"] = "Create four start blocks that each play 'Frรจre Jacques' twice. Add the correct number of delay blocks.";
BlocklyGamesMsg["Music.helpText10"] = "Compose anything you want. You've got a huge number of new blocks you can explore. Have fun!";
BlocklyGamesMsg["Music.helpText10Reddit"] = "Use the 'See Gallery' button to see what other people have composed. If you compose something interesting, use the 'Submit to Gallery' button to publish it.";
BlocklyGamesMsg["Pond.scanTooltip"] = "Scan for enemies. Specify a direction (0-360). Returns the distance to the closest enemy in that direction. Returns Infinity if no enemy found.";
BlocklyGamesMsg["Pond.cannonTooltip"] = "Fire the cannon. Specify a direction (0-360) and a range (0-70).";
BlocklyGamesMsg["Pond.swimTooltip"] = "Swim forward. Specify a direction (0-360).";
BlocklyGamesMsg["Pond.stopTooltip"] = "Stop swimming. Player will slow to a stop.";
BlocklyGamesMsg["Pond.healthTooltip"] = "Returns the player's current health (0 is dead, 100 is healthy).";
BlocklyGamesMsg["Pond.speedTooltip"] = "Returns the current speed of the player (0 is stopped, 100 is full speed).";
BlocklyGamesMsg["Pond.locXTooltip"] = "Returns the X coordinate of the player (0 is the left edge, 100 is the right edge).";
BlocklyGamesMsg["Pond.locYTooltip"] = "Returns the Y coordinate of the player (0 is the bottom edge, 100 is the top edge).";
BlocklyGamesMsg["Pond.logTooltip"] = "Prints a number to your browser's console.";
BlocklyGamesMsg["Pond.docsTooltip"] = "Display the language documentation.";
BlocklyGamesMsg["Pond.documentation"] = "Documentation";
BlocklyGamesMsg["Pond.playerName"] = "Player";
BlocklyGamesMsg["Pond.targetName"] = "Target";
BlocklyGamesMsg["Pond.pendulumName"] = "Pendulum";
BlocklyGamesMsg["Pond.scaredName"] = "Scared";
BlocklyGamesMsg["Pond.helpUseScan"] = "Your solution works, but you can do better. Use 'scan' to tell the cannon how far to shoot.";
BlocklyGamesMsg["Pond.helpText1"] = "Use the 'cannon' command to hit the target. The first parameter is the angle, the second parameter is the range. Find the right combination.";
BlocklyGamesMsg["Pond.helpText2"] = "This target needs to be hit many times. Use a 'while (true)' loop to do something indefinitely.";
BlocklyGamesMsg["Pond.helpText3a"] = "This opponent moves back and forth, making it hard to hit. The 'scan' expression returns the exact range to the opponent in the specified direction.";
BlocklyGamesMsg["Pond.helpText3b"] = "This range is exactly what the 'cannon' command needs to fire accurately.";
BlocklyGamesMsg["Pond.helpText4"] = "This opponent is too far away to use the cannon (which has a limit of 70 meters). Instead, use the 'swim' command to start swimming towards the opponent and crash into it.";
BlocklyGamesMsg["Pond.helpText5"] = "This opponent is also too far away to use the cannon. But you are too weak to survive a collision. Swim towards the opponent while your horizontal location is less than than 50. Then 'stop' and use the cannon.";
BlocklyGamesMsg["Pond.helpText6"] = "This opponent will move away when it is hit. Swim towards it if it is out of range (70 meters).";
BlocklyGamesMsg["Gallery"] = "Gallery";
